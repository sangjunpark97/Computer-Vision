import numpy as np
import matplotlib.pyplot as plt
import math
import cv2
inpath='/content/drive/MyDrive/image/YUSVM.png'
image=cv2.imread(inpath,cv2.IMREAD_GRAYSCALE)
def sobel(image,t):
  row,col=image.shape
  image=np.pad(image,((1,1),(1,1)),'edge')
  sobel_mx=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
  sobel_my=np.array([[-1,-2,-1],[0,0,0],[1,2,1]])
  grad_map_dx=np.zeros((row,col))
  grad_map_dy=np.zeros((row,col))
  strength_map=np.zeros((row,col))
  edge_map=np.zeros((row,col))
  for y in range(0,row):
    for x in range(0,col):
      for k in range(-1,2):
        for l in range(-1,2):
          grad_map_dx[y,x]+=sobel_mx[k+1,l+1]*image[k+y,l+x]
          grad_map_dy[y,x]+=sobel_my[k+1,l+1]*image[k+y,l+x]
      strength_map[y,x]=math.sqrt(grad_map_dx[y,x]**2+grad_map_dy[y,x]**2)
      if(strength_map[y,x]>t):
        edge_map[y,x]=strength_map[y,x]
  return edge_map

def hough_tf(image):
  row,col=image.shape
  hough_height=row*math.sqrt(2)
  hough_width=180
  max=-1
  result=np.zeros((row,col))
  Amap=np.zeros((hough_width,math.ceil(hough_height)+5))
  for y in range(0,row):
    for x in range(0,col):
      if(image[y,x]!=0):
        for theta in range(0,180):
          r=(x-row/2)*math.cos((np.pi/180)*theta)+(y-col/2)*math.sin((np.pi/180)*theta)
          r=r+hough_height/2
          Amap[theta,round(r)]+=1
          if(Amap[theta,round(r)]>max): max=Amap[theta,round(r)]
  for theta in range(0,180):
    for r in range(0,math.ceil(hough_height)):
      Amap[theta,r]=(Amap[theta,r]/max)*255
      if Amap[theta,r]>(130):
        if (theta >= 45 and theta <= 135): 
          x1 = 0;
          x2 = col;
          y1 = ((r - hough_height/2) - (x1 - col/2)*math.cos((np.pi/180)*theta)) / math.sin((np.pi/180)*theta) + col/2;
          y2 = ((r - hough_height/2) - (x2 - col/2)*math.cos((np.pi/180)*theta)) / math.sin((np.pi/180)*theta) + col/2;
          for y in range (row):
            for x in range (col):
              
              if(y>(y2-y1)/(x2-x1)*x+y1-1 and y<(y2-y1)/(x2-x1)*x+y1+1 ):
                result[y,x]=255;
        else :
          y1 = 0;
          y2 = row;
          x1 = ((r - hough_height/2) - (y1 - row/2)*math.sin((np.pi/180)*theta)) / math.cos((np.pi/180)*theta) + col/2;
          x2 = ((r - hough_height/2) - (y2 - row/2)*math.sin((np.pi/180)*theta)) / math.cos((np.pi/180)*theta) + col/2;
          for y in range (row):
            for x in range (col):
                if(x>(x2-x1)/(y2-y1)*y+x1-1 and x<(x2-x1)/(y2-y1)*y+x1+1 ):
                  result[y,x]=255;
  return result
edge_map=sobel(image,200)
Amap=hough_tf(edge_map)
zero=np.zeros((563,558))
result=np.dstack([edge_map, Amap,zero])
print(result.shape)
plt.imshow(result,cmap='gray')