#1-2


import random
import numpy as np
import matplotlib.pyplot as plt
import math
import cv2
#image = cv2.imread('/content/drive/MyDrive/image/house.bmp',cv2.IMREAD_UNCHANGED)
#image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

#transform 한 이미지 사용
#t_image,xmin,ymin,N=tf_system(image,1/4,0)
#t_image=bilinear(t_image,image,1/4,0,xmin,ymin,N)
#t_image=t_image[0:64,0:64]
#image=t_image

row, col, channel=image.shape
n=row*col

# 5차원 벡터 x 만들기
x=np.zeros((row*col,5),dtype='int')
k=0
for i in range(row):
  for j in range(col):
    RGB=image[i,j]
    MN=np.array([i,j])
    S=np.concatenate((MN,RGB), axis=0)
    x[k]=S
    k=k+1

# 초기점 설정
y0=x


for epoch in range(20):
  for i in range (n):
    # a : RGB 컬러 좌표의 L2 norm / b : 공간 좌표의 L2 norm 
    a=np.sqrt(np.sum(((y0[i,2:5]-y0[:,2:5])/7)**2,axis=1))
    b=np.sqrt(np.sum(((y0[i,0:2]-y0[:,0:2])/8)**2,axis=1))
    # K는 커널
    K=np.zeros((a.shape))
    for j in range (n):
      if (a[j]<=1 and b[j]<=1):
        #평편한 커널
        #K[j]=1
        #가우시안 커널
        K[j]=np.exp(-a[j]**2)
    P=np.vstack((K,K,K))
    # 책 식(5.18) 구현 (민시프트)
    W=P.T

    m1=np.sum((W*(y0[:,2:5])),axis=0)
    m2=np.sum(W,axis=0)
    
    y_next=(m1/m2)
    y0[i,2:5]=y_next

v=y0
# origin은 민시프트 결과 이미지
origin=np.zeros((row*col,channel),dtype='int')
# 군집화 후 영상 복구
for i in range (n):
  a=np.sqrt(np.sum(((v[i,2:5]-v[:,2:5])/7)**2,axis=1))
  b=np.sqrt(np.sum(((v[i,0:2]-v[:,0:2])/8)**2,axis=1))
  K=np.zeros((a.shape))
  for j in range (n):
    if (a[j]<=1 and b[j]<=1):
        K[j]=1
  P=np.vstack((K,K,K))

  W=P.T
  m1=np.sum((W*v[:,2:5]),axis=0)
  m2=np.sum(W,axis=0)
  y_next=(m1/m2)
  origin[i]=y_next

origin=origin.reshape(row,col,channel)
plt.imshow(origin)


# 3D 그래프  (결과보기)
fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection='3d')
#for i in range(k):
ax.scatter(origin[:,:,0],origin[:,:,1],origin[:,:,2],c='blue', s=3, alpha=0.05, cmap = plt.cm.Greys)
ax.scatter(image[:,:,0],image[:,:,1],image[:,:,2],  c='red', s=3, alpha=0.05, cmap = plt.cm.Greys)
ax.set_xlabel('R')
ax.set_ylabel('G') 
ax.set_zlabel('B')
plt.show()